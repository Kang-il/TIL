#include <iostream>
#include <algorithm>
using namespace std;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    //(1783)
    // 병든 나이트
    // 병든 나이트가 N × M 크기 체스판의 가장 왼쪽아래 칸에 위치해 있다. 
    // 병든 나이트는 건강한 보통 체스의 나이트와 다르게 4가지로만 움직일 수 있다.

    // 1. 2칸 위로, 1칸 오른쪽
    // 2. 1칸 위로, 2칸 오른쪽
    // 3. 1칸 아래로, 2칸 오른쪽
    // 4. 2칸 아래로, 1칸 오른쪽
    // 병든 나이트는 여행을 시작하려고 하고, 여행을 하면서 방문한 칸의 수를 최대로 하려고 한다. 
    // 병든 나이트의 이동 횟수가 4번보다 적지 않다면, 이동 방법을 모두 한 번씩 사용해야 한다. 
    // 이동 횟수가 4번보다 적은 경우(방문한 칸이 5개 미만)에는 이동 방법에 대한 제약이 없다.
    // 체스판의 크기가 주어졌을 때, 병든 나이트가 여행에서 방문할 수 있는 칸의 최대 개수를 구해보자.

    //항상 오른쪽으로 진행한다.
    // N 높이 M 너비

    int N,M;
    cin>>N>>M;
    // 높이가 1인 경우 -- 이동 할 수 없다. 맨 처음 칸만 방문 가능
    if(N==1) cout<< 1 << '\n';
    // 높이가 2인 경우 -- 2번 방법, 3번 방법만 사용 가능
    // 문제의 조건 4번보다 많으면 모두 한 번씩 이동해야 한다
    // 정답은 4를 넘을 수 없다!
    else if(N==2) cout<< min(4, (M+1)/2 ) << '\n';
    // 높이가 3보다 큰 경우 -- 모든 방법 사용 가능
    // 너비가 6보다 큰 경우 공백 -2 빼고 다 1칸씩 오른쪽으로 이동 가능
    // 1,2,3,4 방법 모두 사용할 경우 2칸 오른쪽 (-2)
    // 나머지는 모두 2,4 방법으로 이동할경우 가장 많이 이동 할 수 있다.
    else if(N>=3){
        // 4가지 방법 모두 사용할 경우 오른쪽으로 6칸이 필요함
        if(M<=6) cout<< min(4,M)<<'\n';
        else cout<< M-2<< '\n';
    }
    return 0;
}